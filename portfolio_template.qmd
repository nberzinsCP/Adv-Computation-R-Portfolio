---
title: "Stat 431 Final Portfolio"
format: pdf
editor: visual
self-contained: true
toc: true
---

```{r, include = FALSE}
library(tidyverse)
portfolio_levels <- tibble()
names(portfolio_levels) <- c("Objective", "Level")
```

# Independent Learning (IL):

*These objectives show your ability to seek out new information and adapt to new tools to solve data analysis problems.*

------------------------------------------------------------------------

## \[IL-1\] Adding new skills:

-   I can find and adopt new packages to accomplish tasks.
-   I can adapt to different syntax styles (tidy, base, formula style, data.table).
-   I can use tutorials, etc. to enhance my understanding of new concepts

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "IL-1", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

Aside from the new packages that I needed to learn to complete this quarter's assignments (which were often taught as a part of that weeks course material) I frequently relied on other packages to help streamline difficult portions of assignments. A notable example was using lubridate to help in the formatting of the dates/times of when the ISS would pass over the U.S.'s state capitals in Lab 3.

[**Lab 3 Example**](https://github.com/Cal-Poly-Advanced-R/lab-3-using-apis-nberzinsCP/commit/781c8642d88717d933a61763ad7021113863f5ea)

Coming into Spring Quarter, I was already accustomed to tidy seeing as that was Dr. Robinson's preferred R dialect. Adjusting to the occasional implementation of base R was at first a difficult transition, but with continued practice I now rely heavily on the base R's ability to, within a relatively little amount of code, be able to manipulate data frames, matrices, etc. (at the cost of readability, of course).

[**Hierarchical Clustering Example**](https://github.com/nberzinsCP/lab-7-clustering-methods-Nils-Fork/blob/master/R/hier_clust.R) **-** Lines 65,66 (Example from worse, full-of-for-loops version of the code)

Beyond the class provided tutorials, I often used other videos/resources to solidify my understanding of certain concepts. The examples provided are YouTube videos, the first of which gives me the mathematical/statistical understanding of average-linkage in hierarchical clustering while the other provided me with a deep introduction of working with reading in APIs (bonus points for the speaker being a Seattlite).

[**Average-Linkage Hierarchical Clustering**](https://www.youtube.com/watch?v=T1ObCUpjq3o&t=308s)

[**APIs Introduction**](https://www.youtube.com/watch?v=7XDDI0BnDAw&t=621s)

------------------------------------------------------------------------

## \[IL-2\] Online resources:

-   I can use online resources (Google, ChatGPT, StackOverflow) to solve problems, debug, or find new tools.
-   I can find source code for similar projects to use as starting points for my own
-   I can read the documentation of an API to figure out how to access data.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 4

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "IL-2", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

As I feel will be the standard from now on, Chat GPT was integral in getting over some of those coding roadblocks this year. I found myself using chat the most when wanting to confirm whether something I thought to be true (e.g. Is "row.names" a built in specification to look for how the rows are organized in the function merge()?). But at times, I'd copy in my code, tell chat where the error occurred, and what kind of error I received. Typically, the code revision chat would return to me me wouldn't work, but it would point me in the right direction.

[**ChatGPT Example 1**](https://chat.openai.com/c/cb28631d-c187-43ea-b1b4-4a2c19c930a7)

[**ChatGPT Example 2**](https://chat.openai.com/c/7e7fd6ba-a049-4cb0-8d03-ec996712b15c)

Also finding inspiration on the internet from similar projects and using those as my own starting points occurred often this quarter. My most notable example had to have been during lab 8 when my aerospace buddies decided I needed to attempt to make art using Lorenz attractors. I made sure to reference the skeleton of one of the suggested articles on this topic.

[**10 Million Points With ggplot clifford attractors**](https://fronkonstin.com/2017/11/07/drawing-10-million-points-with-ggplot-clifford-attractors/)

[**Lab 8 Code**](https://github.com/nberzinsCP/GenerativeArt/blob/main/Lab_8_Generative_Art.qmd)

Although I completed the APIs practice assignment and lab to a degree that I feel would have demonstrated that "I have mostly mastered" the skill, I decided to take on the API's challenge assignment and focus on just being able to read Teleport's API formatting and reading in the scores for the 264 cities referenced in their urban_areas.json document. While it was initially confusing seeing only more API references being returned by fromJSON(rawToChar(res\$content)), I eventually was able to pull out each city's life quality scores by finding the correct reference "/{city}/scores/". From there, I just used some simple string manipulation to return all 264 city life quality scores.

[**Challenge 3 API Code**](https://github.com/nberzinsCP/ReinforcementsForPortfolioWar/blob/main/Challenge%203%20APIs.qmd#L4)

------------------------------------------------------------------------

# Reproducible Workflow (RW):

*These objectives show your ability to produce artifacts and deliverables that are organized, documented, version tracked, and responsibly designed.* \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

## \[RW-1\] File, code, and data management:

-   I can use Git and GitHub to track my progress and collaborate (creating repos, cloning, forking, pull requesting).
-   I always use R Projects and the {here} package to organize my scripts, notebooks, data, and applications.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 4 #make note of some Git skills/git workflow 

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "RW-1", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

Whenever working with GitHub, I always made sure to work out of Branches/Forks. My preference for which depended on whether or not I needed any of the code that my group mates were actively working on in their branches (however, the size of these projects/assignments rarely justified needing their code after we delegate what portion of the assignment would be designated to)

[**Branch Example**](https://github.com/BLauf/STAT431-project-2-master/branches)

[**Fork Example**](https://github.com/nberzinsCP/lab-7-clustering-methods-Nils-Fork)

I've made it a priority of mine to make sure that my folders, scripts, and packages are well organized this year. This can be seen in the organization of my folders and packages in the video below:

{{< video https://www.youtube.com/watch?v=8DAWA_1KcSw >}}

Although I only needed to locally load packages in Lab 2 this year, I'm referencing code from another class that demonstrates that I use that package to make my code reproducible

[**Exam 2 Questions**](https://github.com/nberzinsCP/ReinforcementsForPortfolioWar/blob/main/Exam%202%20Answers.qmd)

When working on Lab 4, my group decided that we wanted our R package to have our data files be present and accessible within the package. This lead to me needing to make my code reproducible for all of those who (theoretically) would want access to it. To make sure that any potential user would be able to access the data files they downloaded upon installation of the package, I used the system.file() function that automatically finds where the package was located in local directories, regardless of where the user has their files stored (find.package is called under the hood of system.file() after checking that the file exists using file.exists).

[**Lab 4 Example**](https://github.com/BLauf/STAT431-project-2-master/commit/1bdc8b2c101ad4292882ca41880c84464dea76a9)

------------------------------------------------------------------------

## \[RW-2\] Notebooks:

-   I can use Quarto and/or R Markdown to produce a reproducible notebook and polished rendered document.
-   I can use appropriate chunk options (echo, error, cache, etc.) to render my qmd/Rmd quickly and cleanly.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "RW-2", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

Only a few instances this quarter have I found myself rendering qmd files, but my recent and most notable example was for the Generative Art Lab. When running an art piece using Lorenz Attractors, there were originally 10 million data points leading to slow run times. Using cache = TRUE on that specific chunk of code stopped me from having to experience that 5+ min run time.

[**Lab 8 Example**](https://github.com/nberzinsCP/GenerativeArt/blob/main/Lab_8_Generative_Art.qmd)

I also often take notes on Quarto in bullet format with interwoven code chunks from lecture material

-   Reference: Any of my weekly class notes

This quarter, because I didn't often work with Quarto or Markdown files, I didn't often need to work with echo, error, cache, etc., but last quarter in STAT 331 I often used them.

[**331-lab7 Example**](https://github.com/nberzinsCP/ReinforcementsForPortfolioWar/blob/main/lab7-functions-and-fish.qmd)

[**331-Challenge7 Example**](https://github.com/nberzinsCP/ReinforcementsForPortfolioWar/blob/main/challenge7-functions-and-fish.qmd)

------------------------------------------------------------------------

## \[RW-3\] Code style

-   My code is clear, readable, well-organized, and well-commented.
-   I can use a package-based workflow to organize my analyses

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3 #use debug browswer to step through package funciton, then workiung with package building commands

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "RW-3", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

[**Project 1 Example**](https://github.com/nberzinsCP/Project1-STAT431/blob/main/app.R) - Code Split between Brandon and I

[**Project 3 Example**](https://github.com/ScottFB101/CustomCluster/blob/main/R/AbstractCluster.R)- Lines 123 and On

------------------------------------------------------------------------

# Technical Communication (TC):

*These objectives show your ability to communicate the processes you have implemented in your code, as well as the data conclusions and results.*

------------------------------------------------------------------------

## \[TC-1\] Project summaries:

-   I can clearly and succinctly summarize the contributions of my project.
-   I accurately interpret statistical or modeling results.
-   I consider the appropriate scope and impact of my project results.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3 #mess around with description and summary of proj 1 dataset

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "TC-1", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

[**Project 1 Shiny App Summary and Capabilities**](https://github.com/nberzinsCP/ReinforcementsForPortfolioWar/blob/main/app%20(1).txt)

[**Project 3 Model Summary and Changeable Inputs Description**](https://github.com/nberzinsCP/ReinforcementsForPortfolioWar/blob/main/For%20the%20Elbow%20Method%20Graph%20(1).txt)

------------------------------------------------------------------------

## \[TC-2\] Documentation:

-   I provide ample documentation and tutorials for my custom functions.
-   I provide user-friendly guides for my tools and software

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "TC-2", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

[**Elbow Graph Project 3 Documentation**](https://github.com/ScottFB101/CustomCluster/blob/main/R/AbstractCluster.R)- Example of good commenting/documentation of the functions, their parameters, and their return values

Dr. Bodwin provided some criticisms on the UX of our application, most notably that should a user open up our app blind, they wouldn't know what is going on within the app or where the data came from. I made small edits in our shiny app to add static text that summarizes the origins of the data and the purpose/functionality of the app.

[**Project 1 App Description**](https://github.com/nberzinsCP/Project1-STAT431/commit/8363d88b4355c41f4b566b5ec4ecedfea6d94753)

------------------------------------------------------------------------

# Data Manipulation (DM):

*These objectives relate to the collection, cleaning, processing, and preparing of datasets for analysis.*

------------------------------------------------------------------------

## \[DM-1\] Data preparation:

-   I can read in datasets to R, including untidy ones.
-   I can clean datasets to deal with missing data, typos, poor formatting, etc.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 4

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "DM-1", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

When working with national energy output data set in the Shiny app project, I was not only able to convert our data set into a tidy one, but I believe I was able to do it in a way that recognized a pattern/consistency in the formatting of the data that then allowed for a more streamlined conversion to a tidy format (as seen when comparing to my group mates resolution). I utilized the map_df() function to quickly read through every sheet (which represented one years worth of energy data) after having worked out some of the formatting issues in the sheets.

[**Project 1 Example**](https://github.com/nberzinsCP/Project1-STAT431/commit/fa077af4da97f08ba7c0c39e0ec3d7720674619f)

In lab 2 when prompted to choose a messy/hard to understand graphic and create a better, cleaner version of the same data, I needed to significantly alter the formatting of the information provided by the respondents. Once the data was mutated into a more coder-friendly format, I was then able to apply the final alterations to prepare it to be input into a Leaflet map.

[**Lab 2 Example**](https://github.com/Cal-Poly-Advanced-R/lab-2-visualization-gavinemartinez/commit/0bddb3582dbbfe3bc2f3d677fbffbddea56db751)

------------------------------------------------------------------------

## \[DM-2\] Data wrangling

-   I can cleverly use pivoting, grouping, and joining to wrangle data.
-   I can use mapping ({purrr}), applying (tapply, lapply, ...), and/or iteration (for loops) to perform repeated tasks.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "DM-2", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

Similar justification to that which was found in DM-1

------------------------------------------------------------------------

## \[DM-3\] Data collection

-   I can use API urls to access JSON data and convert it to a data frame
-   I can webscrape simple tables and information

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "DM-3", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

As mentioned above, to reinforce my understanding of APIs and collecting data from them, I took on reading off the city score data information from Teleport's API.

[**Challenge 3 API Code**](https://github.com/nberzinsCP/ReinforcementsForPortfolioWar/blob/main/Challenge%203%20APIs.qmd#L4)

Although I did not find myself using webscraping on online tables and information beyond the practice assignments, I decided to webscrape the wikipedia page on webscraping.

[**Webscraping Webscraping**](https://github.com/nberzinsCP/ReinforcementsForPortfolioWar/blob/main/Webscraping%20Webscraping.R)

------------------------------------------------------------------------

# Professional Visualization (PV):

------------------------------------------------------------------------

## \[PV-1\] ggplot: grammar of graphics

-   I can use less common geometries, including those from ggplot extension packages.
-   I can use the correct aesthetics to map variables
-   I understand how geometries inherit aesthetics I can add annotations to my plot

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "PV-1", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

[**Project 2 Example**](https://github.com/BLauf/STAT431-project-2-master/blob/main/R/visualFunctions.R)

Video of me working with ggplot: {{< video https://www.youtube.com/watch?v=5BzdgbUCypw >}}

[**Lab 8 Example**](https://github.com/nberzinsCP/GenerativeArt/blob/main/Lab_8_Generative_Art.qmd)- Working with different geometrics in ggplot

------------------------------------------------------------------------

## \[PV-2\] ggplot: theme

-   I can edit the titles, subtitles, captions, axis labels, etc. to create a clearly labelled plot
-   I can choose colors ("scales") and themes to make a visually pleasing and accessible plot

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "PV-2", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

Reference Justification Above

------------------------------------------------------------------------

## \[PV-3\] Dynamic visualizations

-   I can use a package like {gganimate} to create self-contained gifs
-   I can use a package like {plotly}, {ggplotly}, {leaflet}, {ggirafe}, etc. to make interactable html widgets

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "PV-3", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

-   Reference leaflets produced for project 2, project 1, and lab

------------------------------------------------------------------------

## \[PV-4\] Shiny

-   I can create a functional Shiny app.
-   I understand the principle of reactivity, and how to use it.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 4

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "PV-4", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

-   I felt that the multi-step interactivity in our shiny app on the U.S.'s yearly energy output more than demonstrated that I have a strong knowledge of reactivity. Instead of having a series of user input prompts that displayed the specifically requested output, the output was dynamic and

------------------------------------------------------------------------

# Software Development (SD):

*These objectives relate to your ability to develop correct, usable, well-designed, and sophisticated software in the R language.*

------------------------------------------------------------------------

## \[SD-1\] R programming language details

-   I understand non-standard evaluation (aka "Tidy Eval" or "unquoted objects"), and I can use tunneling in my functions.
-   I understand functional programming, and I can use functions as objects in my code design
-   I understand object-oriented programming, and I can define my own classes and methods.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3 #discuss further with prof, particularly last bullet

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "SD-1", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

------------------------------------------------------------------------

## \[SD-2\] Package creation:

-   I can create a folder that is installable as an R package, possibly using {usethis} helper functions
-   I can document my functions using {roxygen2} style commenting
-   I can write and run unit tests using {testthat}
-   I can design a package that is user-friendly and has well-designed functions.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 5 

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "SD-2", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

-   Reference the struggle that was lab 4. Show the initial failure of trying to use ReadRDS() to pull from the ext. int data folder which eventually only lead to reading in the names of the files as opposed to the three datasets associated with the assignment. Then manually adding and removing folders from the initial project's folder options to match the required workflow for our functions to be able to reference the datasets.

------------------------------------------------------------------------

# Matrix Operations (MO):

*These objectives show your ability to manipulate data-related information in the form of vectors and matrices, rather than in high-level data structures.*

------------------------------------------------------------------------

## \[MO-1\] Theory:

-   I understand the difference between ordinary multiplication and matrix multiplication, and how to implement each in R
-   I can implement and briefly explain the matrix equations for multiple linear regression and ridge regression

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "MO-1", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

------------------------------------------------------------------------

## \[MO-2\] Object structures:

-   I can convert data objects into the necessary matrix structures to perform operations on them.
-   I can convert results of matrix operations to convenient data analysis formats

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 4

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "MO-2", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

-   Here reference the hierarchical clustering function made for lab 7. Demonstrate how I switched back from dist() matrices to normal matrices and directly manipulated the distance matrix to create an efficient way of establishing the hierarchical clustering sequence for a given data set.

------------------------------------------------------------------------

# Algorithms and Iteration (AI):

*These objectives ask you to design code-based approaches to statistical computing problems, usually involving iteration to a stopping condition.*

------------------------------------------------------------------------

## \[AI-1\] Iteration to approximate value:

-   I can write a loop that updates values until a certain approximate stopping condition.
-   I can explain and implement gradient descent in simple cases.
-   I can choose reasonable starting conditions and step sizes.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "AI-1", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

------------------------------------------------------------------------

## \[AI-2\] Iteration to exact convergence:

-   I can write a loop that updates values until perfect convergence is reached.
-   I can explain and implement k-means and hierarchical clustering.
-   I can identify moments of randomness or user choice in the starting conditions.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3 #maybe 4, talk with prof

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "AI-2", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

------------------------------------------------------------------------

## \[AI-3\] Generative art:

-   I can apply a variety of generative art functions to make a visually pleasing piece.
-   I can explain why particular changes to the code result in particular differences in the visualization.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 4

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "AI-3", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

-   For computing my trajectory curves donut, I took reference from online material that allowed me to use the Rcpp package to more efficiently run huge graphics. **TALK MORE ABOUT WHY C++ IS FASTER UNDER THE HOOD AND HOW IN THIS PARTICULAR INSTANCE IT HELPED ME RUN MY CODE IN A MORE EFFICIENT MANNER THAN IF I HAD RUN IT IN R**

------------------------------------------------------------------------

## \[AI-4\] Creating an algorithm:

-   I can invent and implement my own iterative algorithm.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "AI-4", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

------------------------------------------------------------------------

# Code Design (CD):

*These objectives relate to making wise or clever choices in how you implement a procedure in code; including creating functions and objects, or thinking about the clarity and efficiency of processes.*

------------------------------------------------------------------------

## \[CD-1\] Speed and Efficiency:

-   I can recognize moments of possible slowdown in my code, and use built-in functions or parallelizing to speed them up.
-   I always use and design vectorized functions whenever possible.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3 #maybe 4

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "CD-1", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

-   Talk about what the hierarchical clustering method looked like before an after. (tons of for loops/nested for loops vs. mostly vectorized code aside from one conditional while loop)

------------------------------------------------------------------------

## \[CD-2\] Object handling:

-   I can make reasonable choices in my code design about when to save intermediate objects.
-   I can convert objects between types and structures as needed.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 0

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "CD-2", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

------------------------------------------------------------------------

## \[CD-3\] Supporting functions:

-   I write helper/shortcut functions to streamline repeated tasks and make my code easier to read.
-   I use intermediate functions to streamline repeated or looping processes.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "CD-3", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

------------------------------------------------------------------------

## \[CD-4\] Algorithmic process:

-   My loops are clean and efficient
-   Proper values are calculated to update objects and/or determine stopping conditions
-   I have built in checks for possible problems or extreme cases in the algorithm

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "CD-4", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

------------------------------------------------------------------------

# Summary

```{r, echo = FALSE}
portfolio_levels %>%
  mutate(
    Category = str_extract(Objective, "[A-Z]{2}"),
    Level = factor(Level)
  ) %>%
  ggplot(aes(x = Level, y = (..count..)/sum(..count..))) +
  geom_bar() +
  labs(x = "Level",
       y = "Percent") +
  theme_minimal() +
  scale_y_continuous(labels=scales::percent)
```
