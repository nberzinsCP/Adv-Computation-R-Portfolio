---
title: "Lab 5: Factors in Visualizations"
author: "Your name"
format: 
  html:
    self-contained: true
    code-tools: true
    toc: true
    number-sections: true
editor: source
execute: 
  error: true
  echo: true
  message: false
  warning: false
---

[Download starter .qmd file](lab5-factors-in-visualizations.qmd)

We will be working with the `survey.csv` data from [Lab 2: Exploring Rodents with ggplot2](https://earobinson95.github.io/stat331-calpoly/lab-assignments/Lab2-graphics/lab2-exploring-rodents-with-ggplot2.html)

+ Where did you save this data file?
+ You might want to remind yourself what is contained in this data set.

```{r setup}
library(tidyverse)
library(lubridate)

# fix the file path for your file folder structure
surveys <- read_csv(
  here::here("Week 2", 
             "surveys.csv")
  )
```

The inspiration for this lab comes from the plotting "best practices" that I've learned over the years. My main inspiration is [Will Chase's 2020 RStudio Conference Presentation](https://www.youtube.com/watch?v=h5cTacaWE6I) -- Glamour of Graphics [(slides)](https://www.williamrchase.com/slides/assets/player/KeynoteDHTMLPlayer.html#0).

::: callout-note
Fun fact! The inspiration for the presentation title came from Dr. Kelly Bodwin!
:::

## Revisiting Lab 2: Exploring Rodents with ggplot2

Let's start with the side-by-side boxplots you created in Lab 2, to visualize the distribution of weight within each species (not species ID!).

```{r}
#| eval: true

surveys |> 
  ggplot(mapping = aes(x = weight, y = species)) + 
  geom_jitter(color = "steelblue", alpha = 0.05) + 
  geom_boxplot(outlier.shape = NA)
```

As you should expect with a character variable, the boxplots go in alphabetical order. This looks rather jumbled, so let's put our factor skills to work!

**1. Reorder the boxplots so the weights go in descending order.**

::: callout-caution
You are required to use functions from `forcats` to complete this task.
:::

```{r}
library(forcats)

surveys |>
  mutate(species = fct_reorder(species, weight)) |>
  ggplot(mapping = aes(x = weight, y = species)) + 
  geom_jitter(color = "steelblue", alpha = 0.05) + 
  geom_boxplot(outlier.shape = NA)
```


**2. Now that you've reordered, look at your y-axis label. That's long! Let's take Will Chase's advice and move the y-axis label to the top of the plot.**

```{r}

surveys |>
  mutate(species = fct_reorder(species, weight)) |>
  ggplot(mapping = aes(x = weight, y = species)) + 
  geom_jitter(color = "steelblue", alpha = 0.05) + 
  geom_boxplot(outlier.shape = NA) +
  labs(title = "Rodent Species Vs. Weight", subtitle = "Y Axis: Species", y = "",) +
  theme(plot.title.position = "plot")
```


## Time-Series Plot

::: callout-warning
This is a new section, meaning a **new** plot. In other words, this is not a continuation of the box-plot from above.
:::

This week, we focused on learning skills related to working with dates, but we have yet to make a very common type of plot -- the time-series plot. We'll use this plot to motivate a second type of factor reordering!

**1. Create a visualization how weights vary for each genus over the duration of the study.**

::: callout-tip
What variables do you need and what are their variable types? What aesthetic would it make sense to map each variable to? Sketch it out first!

```{r}
surveys |>
  group_by(species) |>
  ggplot(aes(x = date, y = weight, color = genus)) +
  geom_line(na.rm = TRUE)

```

*Avoid using faceting here.*
:::

Alright, there are a lot of measurements over time! Let's use our `dplyr` skills to summarize each year and plot the summaries.

**2. Calculate and plot the mean weight for each year (for each genus).**

This should look much less busy! However, you should notice that the legend still goes in alphabetical order.

```{r}
surveys |>
  group_by(year, genus) |>
  summarise(weight_mean = mean(weight)) |>
  ggplot(mapping = aes(x = year, y = weight_mean, color = genus)) +
  geom_line()

```


**3. Reorder the legend line colors so the weights go in descending order.**

::: callout-caution
You are required to use functions from `forcats` to complete this task.
:::

```{r}
surveys |>
  group_by(year, genus) |>
  summarise(weight_mean = mean(weight)) |>
  ggplot(mapping = aes(x = year, y = weight_mean, color = fct_reorder(genus, weight_mean))) +
  geom_line()
```


**4. Now that you've reordered the lines, look at your legend's label. That's terrible! Let's give the legend a new title *and* move the information from the y-axis to the plot title.**


```{r}
surveys |>
  drop_na() |>
  group_by(year, genus) |>
  summarise(weight_mean = mean(weight)) |>
  ggplot(mapping = aes(x = year, y = weight_mean, color = fct_reorder(genus, weight_mean))) +
  geom_line() + 
  labs(subtitle = "Rodent Genus Weight over Time", y = "", color = "Rodent Genus")

```


## Caputures over the Week

For our final exploration, we will consider the number of rodents captured throughout the week -- transitioning to visualizations of categorical variables.

**1. Sketch out a "game plan" for visualizing the number of rodents captured each day of the week.**

::: callout-note
Sketch out and explain your "game plan" using [excalidraw.com](https://excalidraw.com/). Export your image and upload it to [imgur.com](https://imgur.com/). Then copy the link to your image and use Markdown syntax `![](LinkToURL)` to insert the image in your assignment below.
:::

![](https://imgur.com/a/LyAEEmd)

https://imgur.com/a/LyAEEmd - Link bc the image wasn't rendering for me.

**2. Implement your game plan and create a visualization of the number of rodents captured each day of the week.**

As you might have expected, the ordering of the days of the week is not what we would like.

```{r}
surveys |>
  drop_na() |>
  group_by(day_of_week, date) |>
  summarise(date, n()) |>
  distinct(date, .keep_all = TRUE) |>
  ggplot(mapping = aes(x = `n()`, y = day_of_week, color = day_of_week)) +
  geom_point(na.rm = TRUE) +
  geom_boxplot(alpha = .3, outlier.shape = NA, color = "grey") +
  labs(subtitle = "Number of Obeserved Rats in Each Day of Week", x = "Number of Rats Observed That Day", y = "", color = "Day of Week")
```


**3. Change the order of the day of the week to go Monday through Sunday.**

::: callout-note
You can choose to keep the days named as they are (e.g., Mon, Sun), or you can choose to rename the days to their full names (e.g., Monday, Sunday).
:::

::: callout-warning
Your plot **should not** make people tilt their heads to read it! Be mindful in choosing which variable goes on which axis and if / how you use axis labels.
:::

```{r}
surveys |>
  drop_na() |>
  group_by(day_of_week, date) |>
  summarise(date, n()) |>
  distinct(date, .keep_all = TRUE) |>
  ggplot(mapping = aes(
    x = `n()`, 
    y = fct_relevel(day_of_week, c(
      "Sun",
      "Sat",
      "Fri",
      "Thu",
      "Wed",
      "Tue",
      "Mon")), 
    color = day_of_week)) +
  geom_point(na.rm = TRUE) +
  geom_boxplot(alpha = .3, outlier.shape = NA, color = "grey") +
  labs(subtitle = "Number of Obeserved Rats in Each Day of Week", x = "Number of Rats Observed That Day", y = "", color = "Day of Week")
```


It should be very clear that there are more rodents captured on the weekend than during the week. But, let's explore if this is still the case if we use a "Weekday" / "Weekend" classification system instead.

**4. Collapse Monday through Friday into a `"Weekday"` level, and collapse Saturday and Sunday into a `"Weekend"` level. Plot the number of rodents captured between the two groups.**

```{r}
surveys |>
  drop_na() |>
  group_by(day_of_week, date) |>
  summarise(date, n()) |>
  distinct(date, .keep_all = TRUE) |>
  ggplot(mapping = aes(
    x = `n()`, 
    y = fct_collapse(day_of_week,
                     Weekday = c("Mon", "Tue", "Wed", "Thu", "Fri"),
                     Weekend = c("Sat", "Sun")
                     )
    ), 
    color = day_of_week) +
  geom_point(na.rm = TRUE) +
  geom_boxplot(alpha = .3, outlier.shape = NA, color = "grey") +
  labs(subtitle = "Number of Obeserved Rats Weekend vs. Weekday", x = "Number of Rats Observed", y = "", color = "Day of Week")
```


::: callout-warning
Your plot **should not** make people tilt their heads to read it! Be mindful in choosing which variable goes on which axis and if / how you use axis labels.
:::

<br>

:::callout-caution
Don't forget to submit your final project group formation survey this week! Due at the same time as this lab!
:::
