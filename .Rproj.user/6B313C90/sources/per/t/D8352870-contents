---
title: "Stat 431 Final Portfolio"
format: pdf
editor: visual
self-contained: true
toc: true
---

```{r, include = FALSE}
library(tidyverse)
portfolio_levels <- tibble()
names(portfolio_levels) <- c("Objective", "Level")
```

# Independent Learning (IL):

*These objectives show your ability to seek out new information and adapt to new tools to solve data analysis problems.*

------------------------------------------------------------------------

## \[IL-1\] Adding new skills:

-   I can find and adopt new packages to accomplish tasks.
-   I can adapt to different syntax styles (tidy, base, formula style, data.table).
-   I can use tutorials, etc. to enhance my understanding of new concepts

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "IL-1", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

-   Already strong in tidy, was the primary syntax style I worked with in 331

-   Don't really know how this can be scored above a 3, to have completed this class's assignments, I needed to fulfill all of these learning objectives in a satisfactory way

------------------------------------------------------------------------

## \[IL-2\] Online resources:

-   I can use online resources (Google, ChatGPT, StackOverflow) to solve problems, debug, or find new tools.
-   I can find source code for similar projects to use as starting points for my own
-   I can read the documentation of an API to figure out how to access data.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3 #soon to be 4 maybe, refernce gpt conversation

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "IL-2", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

-   Once again, I feel like this one can't really be scored above a 3 as it is imperative to be able to use the internet's resources to have completed the work for this class

------------------------------------------------------------------------

# Reproducible Workflow (RW):

*These objectives show your ability to produce artifacts and deliverables that are organized, documented, version tracked, and responsibly designed.* \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

## \[RW-1\] File, code, and data management:

-   I can use Git and GitHub to track my progress and collaborate (creating repos, cloning, forking, pull requesting).
-   I always use R Projects and the {here} package to organize my scripts, notebooks, data, and applications.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3 #make note of some Git skills/git workflow 

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "RW-1", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

-   Again, not sure how these can be ranked above a 3. If work wasn't reproducible then it wouldn't have been functioning when checked and graded.

------------------------------------------------------------------------

## \[RW-2\] Notebooks:

-   I can use Quarto and/or R Markdown to produce a reproducible notebook and polished rendered document.
-   I can use appropriate chunk options (echo, error, cache, etc.) to render my qmd/Rmd quickly and cleanly.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3 #demo of lab8 and project 2 

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "RW-2", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

-   Most recent example being the art works and utilizing cache to automatically reload the memory/processing intensive graphics produced in lab 8.

-   Rendering files didn't seem to be a super pertinent theme in the class as we often submitted R script files in packages

------------------------------------------------------------------------

## \[RW-3\] Code style

-   My code is clear, readable, well-organized, and well-commented.
-   I can use a package-based workflow to organize my analyses

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3 #use debug browswer to step through package funciton, then workiung with package building commands

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "RW-3", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

-   Again, not sure how this can be ranked above a 3. Seems standard for all assignments worked on this quarter

------------------------------------------------------------------------

# Technical Communication (TC):

*These objectives show your ability to communicate the processes you have implemented in your code, as well as the data conclusions and results.*

------------------------------------------------------------------------

## \[TC-1\] Project summaries:

-   I can clearly and succinctly summarize the contributions of my project.
-   I accurately interpret statistical or modeling results.
-   I consider the appropriate scope and impact of my project results.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3 #mess around with description and summary of proj 1 dataset

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "TC-1", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

------------------------------------------------------------------------

## \[TC-2\] Documentation:

-   I provide ample documentation and tutorials for my custom functions.
-   I provide user-friendly guides for my tools and sofware

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "TC-2", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

-   Again, not sure how this can be ranked above a 3. Seems standard for all assignments worked on this quarter

------------------------------------------------------------------------

# Data Manipulation (DM):

*These objectives relate to the collection, cleaning, processing, and preparing of datasets for analysis.*

------------------------------------------------------------------------

## \[DM-1\] Data preparation:

-   I can read in datasets to R, including untidy ones.
-   I can clean datasets to deal with missing data, typos, poor formatting, etc.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 4

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "DM-1", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

-   When working with national energy output data set in the Shiny app project, I was not only able to convert our data set into a tidy one, but I believe I was able to do it in a way that recognized a pattern/consistency in the formatting of the data that then allowed for a more streamlined conversion to a tidy format (as seen when comparing to my group mates resolution).

    -   <https://github.com/nberzinsCP/Project1-STAT431/commit/fa077af4da97f08ba7c0c39e0ec3d7720674619f>

    -   Utilized the map_df() function to quickly read through every sheet (which represented one years worth of energy data) after having worked out some of the formatting issues in the sheets.

------------------------------------------------------------------------

## \[DM-2\] Data wrangling

-   I can cleverly use pivoting, grouping, and joining to wrangle data.
-   I can use mapping ({purrr}), applying (tapply, lapply, ...), and/or iteration (for loops) to perform repeated tasks.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "DM-2", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

-   Similar justification and code to that being referenced above

------------------------------------------------------------------------

## \[DM-3\] Data collection

-   I can use API urls to access JSON data and convert it to a data frame
-   I can webscrape simple tables and information

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 0 #TBD

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "DM-3", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

-   

------------------------------------------------------------------------

# Professional Visualization (PV):

------------------------------------------------------------------------

## \[PV-1\] ggplot: grammar of graphics

-   I can use less common geometries, including those from ggplot extension packages.
-   I can use the correct aesthetics to map variables
-   I understand how geometries inherit aesthetics I can add annotations to my plot

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "PV-1", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

-   

------------------------------------------------------------------------

## \[PV-2\] ggplot: theme

-   I can edit the titles, subtitles, captions, axis labels, etc. to create a clearly labelled plot
-   I can choose colors ("scales") and themes to make a visually pleasing and accessible plot

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "PV-2", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

------------------------------------------------------------------------

## \[PV-3\] Dynamic visualizations

-   I can use a package like {gganimate} to create self-contained gifs
-   I can use a package like {plotly}, {ggplotly}, {leaflet}, {ggirafe}, etc. to make interactable html widgets

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "PV-3", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

-   Reference leaflets produced for project 2, project 1, and lab 2

------------------------------------------------------------------------

## \[PV-4\] Shiny

-   I can create a functional Shiny app.
-   I understand the principle of reactivity, and how to use it.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 4

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "PV-4", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

-   I felt that the multi-step interactivity in our shiny app on the U.S.'s yearly energy output more than demonstrated that I have a strong knowledge of reactivity. Instead of having a series of user input prompts that displayed the specifically requested output, the output was dynamic and

------------------------------------------------------------------------

# Software Development (SD):

*These objectives relate to your ability to develop correct, usable, well-designed, and sophisticated software in the R language.*

------------------------------------------------------------------------

## \[SD-1\] R programming language details

-   I understand non-standard evaluation (aka "Tidy Eval" or "unquoted objects"), and I can use tunneling in my functions.
-   I understand functional programming, and I can use functions as objects in my code design
-   I understand object-oriented programming, and I can define my own classes and methods.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3 #discuss further with prof, particularly last bullet

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "SD-1", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

------------------------------------------------------------------------

## \[SD-2\] Package creation:

-   I can create a folder that is installable as an R package, possibly using {usethis} helper functions
-   I can document my functions using {roxygen2} style commenting
-   I can write and run unit tests using {testthat}
-   I can design a package that is user-friendly and has well-designed functions.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 5 

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "SD-2", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

-   Reference the struggle that was lab 4. Show the initial failure of trying to use ReadRDS() to pull from the ext. int data folder which eventually only lead to reading in the names of the files as opposed to the three datasets associated with the assignment. Then manually adding and removing folders from the initial project's folder options to match the required workflow for our functions to be able to reference the datasets.

------------------------------------------------------------------------

# Matrix Operations (MO):

*These objectives show your ability to manipulate data-related information in the form of vectors and matrices, rather than in high-level data structures.*

------------------------------------------------------------------------

## \[MO-1\] Theory:

-   I understand the difference between ordinary multiplication and matrix multiplication, and how to implement each in R
-   I can implement and briefly explain the matrix equations for multiple linear regression and ridge regression

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "MO-1", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

------------------------------------------------------------------------

## \[MO-2\] Object structures:

-   I can convert data objects into the necessary matrix structures to perform operations on them.
-   I can convert results of matrix operations to convenient data analysis formats

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 4

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "MO-2", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

-   Here reference the hierarchical clustering function made for lab 7. Demonstrate how I switched back from dist() matrices to normal matrices and directly manipulated the distance matrix to create an efficient way of establishing the hierarchical clustering sequence for a given data set.

------------------------------------------------------------------------

# Algorithms and Iteration (AI):

*These objectives ask you to design code-based approaches to statistical computing problems, usually involving iteration to a stopping condition.*

------------------------------------------------------------------------

## \[AI-1\] Iteration to approximate value:

-   I can write a loop that updates values until a certain approximate stopping condition.
-   I can explain and implement gradient descent in simple cases.
-   I can choose reasonable starting conditions and step sizes.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "AI-1", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

------------------------------------------------------------------------

## \[AI-2\] Iteration to exact convergence:

-   I can write a loop that updates values until perfect convergence is reached.
-   I can explain and implement k-means and hierarchical clustering.
-   I can identify moments of randomness or user choice in the starting conditions.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3 #maybe 4, talk with prof

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "AI-2", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

------------------------------------------------------------------------

## \[AI-3\] Generative art:

-   I can apply a variety of generative art functions to make a visually pleasing piece.
-   I can explain why particular changes to the code result in particular differences in the visualization.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 4

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "AI-3", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

-   For computing my trajectory curves donut, I took reference from online material that allowed me to use the Rcpp package to more efficiently run huge graphics. **TALK MORE ABOUT WHY C++ IS FASTER UNDER THE HOOD AND HOW IN THIS PARTICULAR INSTANCE IT HELPED ME RUN MY CODE IN A MORE EFFICIENT MANNER THAN IF I HAD RUN IT IN R**

------------------------------------------------------------------------

## \[AI-4\] Creating an algorithm:

-   I can invent and implement my own iterative algorithm.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "AI-4", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

------------------------------------------------------------------------

# Code Design (CD):

*These objectives relate to making wise or clever choices in how you implement a procedure in code; including creating functions and objects, or thinking about the clarity and efficiency of processes.*

------------------------------------------------------------------------

## \[CD-1\] Speed and Efficiency:

-   I can recognize moments of possible slowdown in my code, and use built-in functions or parallelizing to speed them up.
-   I always use and design vectorized functions whenever possible.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3 #maybe 4

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "CD-1", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

-   Talk about what the hierarchical clustering method looked like before an after. (tons of for loops/nested for loops vs. mostly vectorized code aside from one conditional while loop)

------------------------------------------------------------------------

## \[CD-2\] Object handling:

-   I can make reasonable choices in my code design about when to save intermediate objects.
-   I can convert objects between types and structures as needed.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 0

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "CD-2", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

------------------------------------------------------------------------

## \[CD-3\] Supporting functions:

-   I write helper/shortcut functions to streamline repeated tasks and make my code easier to read.
-   I use intermediate functions to streamline repeated or looping processes.

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "CD-3", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

------------------------------------------------------------------------

## \[CD-4\] Algorithmic process:

-   My loops are clean and efficient
-   Proper values are calculated to update objects and/or determine stopping conditions
-   I have built in checks for possible problems or extreme cases in the algorithm

```{r, include = FALSE}
## Fill in the line below with your self-assigned level for this objective.
my_level <- 3

portfolio_levels <- portfolio_levels %>%
  bind_rows(c(Objective = "CD-4", 
              Level = my_level))
```

### Level: `r my_level`

### Justification

------------------------------------------------------------------------

# Summary

```{r, echo = FALSE}
portfolio_levels %>%
  mutate(
    Category = str_extract(Objective, "[A-Z]{2}"),
    Level = factor(Level)
  ) %>%
  ggplot(aes(x = Level, y = (..count..)/sum(..count..))) +
  geom_bar() +
  labs(x = "Level",
       y = "Percent") +
  theme_minimal() +
  scale_y_continuous(labels=scales::percent)
```
