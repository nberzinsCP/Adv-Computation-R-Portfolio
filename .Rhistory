install.packages(c("httr","jsonlite"))
library()
library(c(httr, jsonlite))
library(httr)
library(jsonlite)
?jsonlite
res <- GET("https://api.teleport.org/api/cities/{city_id}/")
data <- fromJSON(rawToChar(res$content))
?GET()
res <- GET("https://api.teleport.org/api/cities/")
data <- fromJSON(rawToChar(res$content))
knitr::opts_chunk$set(echo = TRUE)
res = GET("https://api.fiscaldata.treasury.gov/services/api/fiscal_service/v1/accounting/od/rates_of_exchange?fields=country_currency_desc,exchange_rate,%20record_date&filter=record_date:gte:2015-01-01")
head(res)
res <- GET("https://api.teleport.org/api/cities/")
data <- fromJSON(rawToChar(res$content))
data$count
data$`_embedded`
data$`_links`
data$`_embedded`$`city:search-results`
data$`_embedded`$`city:search-results`$matching_alternate_names
data$`_embedded`$`city:search-results`$matching_full_name
res <- GET("https://developers.teleport.org/assets/urban_areas.json")
data <- fromJSON(rawToChar(res$content))
cities <- unlist(data)
cities
?unlist()
cities <- unlist(data, use.names = FALSE)
cities
res <- GET("https://api.teleport.org/api/cities/{seattle}/")
res <- GET("https://api.teleport.org/api/cities/{?seattle}/")
test <- fromJSON(rawToCHar(res$content))
test <- fromJSON(rawToChar(res$content))
#must verify a specific city_id using the formatting provided by teleport
res <- GET("https://api.teleport.org/api/cities/")
data <- fromJSON(rawToChar(res$content))
data
base_url <- data[2]
base_url <- unlist(data[2])
base_url
base_url <- unlist(data[[2]])
base_url
base_url <- data[[2]]
base_url
data$
cities <- unlist(data, use.names = FALSE)
data$
cities <- unlist(data, use.names = FALSE)
data <- fromJSON(rawToChar(res$content))
data
data$`_links`
data$`_links`$curies
references <- data$`_links`$curies
references
references$href[2]
references <- data$`_embedded`$`city:search-results`
references
references <- data$`_embedded`
references
references <- data$`_embedded`$`city:search-results`$`_links`$`city:item`
references
res <- GET("https://api.teleport.org/api/cities/seattle/")
test <- fromJSON(rawToChar(res$content))
res <- GET(references[1])
references[1]
references[1]
reference[1,]
references[1,]
res <- GET(references[1, ])
test <- fromJSON(rawToChar(res$content))
View(test)
test
test$geoname_id
test$`_links`$`city:urban_area`
test$`_links`$`city:urban_area`$href
urban_area <- test$`_links`$`city:urban_area`$href
res <- GET(urban_area)
city_data <- fromJSON(rawToChar(res$content))
city_data
thing <- get("https://api.teleport.org/api/cities/geonameid:1796236/")
thing <- GET("https://api.teleport.org/api/cities/geonameid:1796236/")
thing$content
thing_char <- rawToChar(thing)
thing_char <- rawToChar(thing$content)
thing_char
thing_JSON <- fromJSON(thing_char, flatten = TRUE)
thing_JSON
thing <- GET("https://api.teleport.org/api/cities/slug:san-francisco-bay-area/scores/")
thing_char <- rawToChar(thing$content)
thing_char
thing <- GET("https://api.teleport.org/api/urban_areas/slug:san-francisco-bay-area/scores/")
thing_char <- rawToChar(thing$content)
thing_char
thing_JSON <- fromJSON(thing_char, flatten = TRUE)
thing_JSON
thing_JSON
thing_JSON$categories
res <- GET("https://developers.teleport.org/assets/urban_areas.json")
data <- fromJSON(rawToChar(res$content))
cities <- unlist(data, use.names = FALSE)
cities
cities
library(httr)
library(jsonlite)
res <- GET("https://developers.teleport.org/assets/urban_areas.json")
data <- fromJSON(rawToChar(res$content))
cities <- unlist(data, use.names = FALSE)
cities
thing <- GET("https://api.teleport.org/api/urban_areas/slug:glasgow/scores/")
thing_json <- fromJSON(rawToChar(res$content))
thing_json
thing_json <- fromJSON(rawToChar(thing$content))
thing_json
cities[23]
for(i in 1:length(cities))
base_url <- "https://api.teleport.org/api/urban_areas/slug:"
scores_list <- list()
for(i in 1:length(cities)) {
city_url <- paste0(base_url, cities[i], "/scores/")
res <- GET(city_url)
scores <- fromJSON(rawToChar(res$content))
scores_list <- c(scores_list, scores)
}
View(scores_list)
browser()
base_url <- "https://api.teleport.org/api/urban_areas/slug:"
scores_list <- list()
for(i in 1:length(cities)) {
city_url <- paste0(base_url, cities[i], "/scores/")
res <- GET(city_url)
scores <- fromJSON(rawToChar(res$content))
scores_list <- c(scores_list, scores)
}
res <- GET("https://api.teleport.org/api/urban_areas/slug:seattle/scores/")
asdf <- fromJSON(rawToChar(res$content))
asdf
base_url <- "https://api.teleport.org/api/urban_areas/slug:"
scores_list <- list()
for(i in 1:length(cities)) {
city_url <- paste0(base_url, cities[i], "/scores/")
res <- GET(city_url)
scores <- fromJSON(rawToChar(res$content))
scores_list <- c(scores_list, scores$categories)
}
base_url <- "https://api.teleport.org/api/urban_areas/slug:"
scores_list <- list()
for(i in 1:length(cities)) {
city_url <- paste0(base_url, cities[i], "/scores/")
res <- GET(city_url)
scores <- fromJSON(rawToChar(res$content))
scores_df <- data.frame(scores$categories)
scores_list <- c(scores_list, scores_df)
}
scrores_list
scores_list
base_url <- "https://api.teleport.org/api/urban_areas/slug:"
scores_list <- list()
for(i in 1:length(cities)) {
city_url <- paste0(base_url, cities[i], "/scores/")
res <- GET(city_url)
scores <- fromJSON(rawToChar(res$content))
city_scores <- list(scores$categories)
scores_list <- c(scores_list, city_scores)
}
head(scores_list, n = 10)
?list()
base_url <- "https://api.teleport.org/api/urban_areas/slug:"
scores_list <- list()
for(i in 1:length(cities)) {
city_url <- paste0(base_url, cities[i], "/scores/")
res <- GET(city_url)
scores <- fromJSON(rawToChar(res$content))
city_scores <- list(scores$categories)
scores_list <- c(scores_list, city_scores)
}
names(scores_list) <- cities
head(scores_list, n = 10)
scores_list$aarhus
?system.file()
shiny::runApp('C:/Users/nils/OneDrive/Desktop/Cal Poly/2022-2023/Spring Quarter/STAT 431/Week 4/Project1-STAT431')
library(rvest)
fifa <- read_html("https://www.fifa.com/fifa-world-ranking/men?dateId=id13974")
Country <- fifa %>%
html_nodes(".row_rankingTableFullCell_QBdWh:nth-child(3)") %>%
html_text()
colleges <- read_html("https://www.forbes.com/top-colleges/")
College <- colleges %>%
html_nodes(".Table_tableRow__M82uU .Table_organizationName__n0jEN") %>%
html_text()
College
wiki <- read_html("https://en.wikipedia.org/wiki/Web_scraping")
library(rvest)
library(magrittr)
wiki <- read_html("https://en.wikipedia.org/wiki/Web_scraping")
web_scraping <- wiki %>%
html_nodes(".mw-headline") %>%
html_text()
wiki <- read_html("https://en.wikipedia.org/wiki/Web_scraping")
headlines <- wiki %>%
html_nodes(".mw-headline") %>%
html_text()
headlines
verification_boxes <- wiki %>%
html_nodes(".ambox-content") %>%
html_text()
verification_boxes
intext_links <- wiki %>%
html_nodes(".navigation-not-searchable a , #mw-content-text li a , p a") %>%
html_text()
View(wiki)
cppFunction('DataFrame createTrajectory(int n, double x0, double y0,
double a, double b, double c, double d) {
// create the columns
NumericVector x(n);
NumericVector y(n);
x[0]=x0;
y[0]=y0;
for(int i = 1; i < n; ++i) { //0 indexed as opposed to R being 1 indexed
x[i] = c*sin(a*y[i-1])+cos(a*x[i-1]);
y[i] = sin(b*x[i-1])+d*cos(b*y[i-1]);
}
// return a new data frame
return DataFrame::create(_["x"]= x, _["y"]= y);
}
')
library(Rcpp)
library(ggplot2)
library(dplyr)
cppFunction('DataFrame createTrajectory(int n, double x0, double y0,
double a, double b, double c, double d) {
// create the columns
NumericVector x(n);
NumericVector y(n);
x[0]=x0;
y[0]=y0;
for(int i = 1; i < n; ++i) { //0 indexed as opposed to R being 1 indexed
x[i] = c*sin(a*y[i-1])+cos(a*x[i-1]);
y[i] = sin(b*x[i-1])+d*cos(b*y[i-1]);
}
// return a new data frame
return DataFrame::create(_["x"]= x, _["y"]= y);
}
')
#https://cran.r-project.org/web/packages/Rcpp/vignettes/Rcpp-introduction.pdf
a=1.24458046630025
b=1.25191834103316
c=1.81590817030519
d=-1.90866735205054
df=createTrajectory(1000000, 0, 0, a, b, c, d)
ggplot(df, aes(x, y)) +
geom_point(color= "#e9c46a", shape = 46, alpha=.05) +
theme(legend.position  = "none",
panel.background = element_rect(fill="#264653"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
#https://fronkonstin.com/2017/11/07/drawing-10-million-points-with-ggplot-clifford-attractors/
cppFunction('DataFrame createTrajectory(int n, double x0, double y0,
double a, double b, double c, double d) {
// create the columns
NumericVector x(n);
NumericVector y(n);
x[0]=x0;
y[0]=y0;
for(int i = 1; i < n; ++i) { //0 indexed as opposed to R being 1 indexed
x[i] = c*sin(a*y[i-1])+sin(a*x[i-1]);
y[i] = sin(b*x[i-1])+d*cos(b*y[i-1]);
}
// return a new data frame
return DataFrame::create(_["x"]= x, _["y"]= y);
}
')
#https://cran.r-project.org/web/packages/Rcpp/vignettes/Rcpp-introduction.pdf
a=1.24458046630025
b=1.25191834103316
c=1.81590817030519
d=-1.90866735205054
df=createTrajectory(1000000, 0, 0, a, b, c, d)
ggplot(df, aes(x, y)) +
geom_point(color= "#e9c46a", shape = 46, alpha=.05) +
theme(legend.position  = "none",
panel.background = element_rect(fill="#264653"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
#https://fronkonstin.com/2017/11/07/drawing-10-million-points-with-ggplot-clifford-attractors/
cppFunction('DataFrame createTrajectory(int n, double x0, double y0,
double a, double b, double c, double d) {
// create the columns
NumericVector x(n);
NumericVector y(n);
x[0]=x0;
y[0]=y0;
for(int i = 1; i < n; ++i) { //0 indexed as opposed to R being 1 indexed
x[i] = c*sin(a*y[i-1])+cos(a*x[i-1]);
y[i] = cos(b*x[i-1])+d*cos(b*y[i-1]);
}
// return a new data frame
return DataFrame::create(_["x"]= x, _["y"]= y);
}
')
#https://cran.r-project.org/web/packages/Rcpp/vignettes/Rcpp-introduction.pdf
a=1.24458046630025
b=1.25191834103316
c=1.81590817030519
d=-1.90866735205054
df=createTrajectory(1000000, 0, 0, a, b, c, d)
ggplot(df, aes(x, y)) +
geom_point(color= "#e9c46a", shape = 46, alpha=.05) +
theme(legend.position  = "none",
panel.background = element_rect(fill="#264653"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
#https://fronkonstin.com/2017/11/07/drawing-10-million-points-with-ggplot-clifford-attractors/
cppFunction('DataFrame createTrajectory(int n, double x0, double y0,
double a, double b, double c, double d) {
// create the columns
NumericVector x(n);
NumericVector y(n);
x[0]=x0;
y[0]=y0;
for(int i = 1; i < n; ++i) { //0 indexed as opposed to R being 1 indexed
x[i] = c*sin(a*y[i-1])+cos(a*x[i-1]);
y[i] = sin(b*x[i-1])+d*cos(b*y[i-1]);
}
// return a new data frame
return DataFrame::create(_["x"]= x, _["y"]= y);
}
')
#https://cran.r-project.org/web/packages/Rcpp/vignettes/Rcpp-introduction.pdf
a=1.24458046630025
b=1.25191834103316
c=1.81590817030519
d=-1.90866735205054
df=createTrajectory(1000000, 0, 0, a, b, c, d)
ggplot(df, aes(x, y)) +
geom_point(color= "#e9c46a", shape = 46, alpha=.05) +
theme(legend.position  = "none",
panel.background = element_rect(fill="#264653"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
#https://fronkonstin.com/2017/11/07/drawing-10-million-points-with-ggplot-clifford-attractors/
use_seed(431) %>%
entity_circle(
grain = 80
) %>%
unfold_meander(
iterations = 500,
smoothing = 10
) %>%
style_ribbon()
library(jasmines)
use_seed(431) %>%
entity_circle(
grain = 80
) %>%
unfold_meander(
iterations = 500,
smoothing = 10
) %>%
style_ribbon()
iris |>
ggplot(aes(x = Sepal.Length, y = Sepal.Width, color = Species, size = Sepal.Width, show.legend = FALSE)) +
geom_point(shape = 19, show.legend = FALSE, alpha = .9) +
geom_line(show.legend = FALSE, alpha = .3) +
scale_color_brewer(
type = "seq",
palette = 11,
direction = 1
) +
theme_void() +
theme(
panel.backgroun = element_rect(fill = "black")
) +
coord_polar()
?entity_circle
